// ==========================================================
//  UTILS
// ==========================================================

//  Dependencies:
@use "../setting" as *;
@use "mixins" as *;
@use "sass:map";
@use "sass:string";
@use "sass:meta";
@use "sass:list";
@use "sass:math";

// Colors pallette
@each $name, $value in $nexa-colors {
    .text-#{"" + $name} {
        color: $value !important;
    }

    .bg-#{"" + $name} {
        background-color: $value !important;
    }

    .border-#{"" + $name} {
        border-color: $value !important;
    }
}

// Spacers
$nexa-sides: (
    "": null,
    "t": top,
    "b": bottom,
    "s": left,
    "e": right,
    "x": (
        left,
        right,
    ),
    "y": (
        top,
        bottom,
    ),
);

@function _spacer-suffix($key) {
    @return if($key == 6, auto, $key);
}

@mixin spacing-utilities {
    @each $prefix, $prop in (m: margin, p: padding) {
        @each $key, $val in $nexa-spacers {
            $suffix: _spacer-suffix($key);

            @if not($prefix == p and $val == auto) {
                .#{$prefix}-#{$suffix} {
                    #{$prop}: #{$val} !important;
                }
            }

            @each $abbr, $side in $nexa-sides {
                @if not($prefix == p and $val == auto) {
                    .#{$prefix}#{$abbr}-#{$suffix} {
                        @if $side == null {
                            #{$prop}: #{$val} !important;
                        } @else if meta.type-of($side) == "list" {
                            @each $s in $side {
                                #{$prop}-#{$s}: #{$val} !important;
                            }
                        } @else {
                            #{$prop}-#{$side}: #{$val} !important;
                        }
                    }
                }
            }
        }
    }

    @each $key, $val in $nexa-spacers {
        .gap-#{_spacer-suffix($key)} {
            gap: #{$val} !important;
        }
    }
}

@include spacing-utilities;

// Top, right, bottom, left
@each $key, $val in $nexa-spacers {
    .top-#{$key} {
        top: $val !important;
    }
    .right-#{$key} {
        right: $val !important;
    }
    .bottom-#{$key} {
        bottom: $val !important;
    }
    .left-#{$key} {
        left: $val !important;
    }
}

// Z-index
@each $key, $value in $nexa-z-index {
    .z-index-#{$key} {
        z-index: $value;
    }
}

// Position
$positions: (
    static: static,
    relative: relative,
    absolute: absolute,
    fixed: fixed,
    sticky: sticky,
);

@each $name, $value in $positions {
    .p-#{$name} {
        position: #{$value} !important;
    }
}

// Display
$displays: (
    block: block,
    inline: inline,
    inline-block: inline-block,
    flex: flex,
    inline-flex: inline-flex,
    grid: grid,
    inline-grid: inline-grid,
    none: none,
);

@each $name, $value in $displays {
    .d-#{$name} {
        display: #{$value} !important;
    }
}

// Flex
$flex-directions: (
    row: row,
    row-reverse: row-reverse,
    column: column,
    column-reverse: column-reverse,
);

@each $name, $value in $flex-directions {
    .flex-#{$name} {
        display: flex !important;
        flex-direction: #{$value} !important;
    }
}
$justify-options: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around,
    evenly: space-evenly,
);

@each $name, $value in $justify-options {
    .justify-content-#{$name} {
        display: flex !important;
        justify-content: #{$value} !important;
    }
}

$align-items: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch,
);

@each $name, $value in $align-items {
    .align-items-#{$name} {
        display: flex !important;
        align-items: #{$value} !important;
    }
}
$align-self: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch,
);

@each $name, $value in $align-self {
    .align-self-#{$name} {
        align-self: #{$value} !important;
    }
}
.flex-fill {
    flex: 1 1 auto !important;
}
$flex-grow: (
    0: 0,
    1: 1,
);

$flex-shrink: (
    0: 0,
    1: 1,
);

// Flex grow
@each $key, $value in $flex-grow {
    .flex-grow-#{$key} {
        flex-grow: #{$value} !important;
    }
}

// Flex shrink
@each $key, $value in $flex-shrink {
    .flex-shrink-#{$key} {
        flex-shrink: #{$value} !important;
    }
}

// Flex wraps
$flex-wraps: (
    nowrap: nowrap,
    wrap: wrap,
    wrap-reverse: wrap-reverse,
);

@each $name, $value in $flex-wraps {
    .flex-#{$name} {
        display: flex !important;
        flex-wrap: #{$value} !important;
    }
}

// Flex orders
$flex-orders: 0, 1, 2, 3, 4, 5;

@each $num in $flex-orders {
    .order-#{$num} {
        order: #{$num} !important;
    }
}

// Order
.order-first {
    order: -1 !important;
}

.order-last {
    order: 9999 !important;
}

// Width
$sizes-percent: (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);

@each $val in $sizes-percent {
    .w-#{$val} {
        width: #{$val + "%"} !important;
    }

    .h-#{$val} {
        height: #{$val + "%"} !important;
    }
}
$user-selects: (
    all: all,
    auto: auto,
    none: none,
);

// User select
@each $name, $value in $user-selects {
    .user-select-#{$name} {
        user-select: #{$value} !important;
        -webkit-user-select: #{$value} !important;
        -moz-user-select: #{$value} !important;
    }
}

// Opacity
$opacity-values: (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100);

@each $val in $opacity-values {
    .opacity-#{$val} {
        opacity: #{math.div($val, 100)} !important;
    }
}

// Overflow
$overflow-values: (
    auto: auto,
    hidden: hidden,
    visible: visible,
    scroll: scroll,
);

@each $name, $value in $overflow-values {
    .overflow-#{$name} {
        overflow: #{$value} !important;
    }
}

@each $name, $value in $overflow-values {
    .overflow-x-#{$name} {
        overflow-x: #{$value} !important;
    }
}

@each $name, $value in $overflow-values {
    .overflow-y-#{$name} {
        overflow-y: #{$value} !important;
    }
}

// Text align
$text-align: (start, center, end);
@each $name in $text-align {
    .text-#{$name} {
        text-align: #{$name} !important;
    }
}

// Text wrap
.text-wrap {
    white-space: normal !important;
}
.text-nowrap {
    white-space: nowrap !important;
}
.text-break {
    overflow-wrap: break-word !important;
    word-break: break-word !important;
}

// Text transform
$text-transform: (
    lowercase: lowercase,
    uppercase: uppercase,
    capitalize: capitalize,
);
@each $name, $val in $text-transform {
    .text-#{$name} {
        text-transform: #{$val} !important;
    }
}

// Font weight
$font-weights: (
    bold: 700,
    bolder: bolder,
    semibold: 600,
    medium: 500,
    normal: 400,
    light: 300,
    lighter: lighter,
);
@each $name, $val in $font-weights {
    .fw-#{$name} {
        font-weight: #{$val} !important;
    }
}

// Text decoration
$text-decorations: (
    underline: underline,
    line-through: line-through,
    none: none,
);
@each $name, $val in $text-decorations {
    .text-decoration-#{$name} {
        text-decoration: #{$val} !important;
    }
}

// Visibility
.visible {
    visibility: visible !important;
}

.invisible {
    visibility: hidden !important;
}

// Container
.container {
    @include container(map.get($nexa-setting, container-width), map.get($nexa-setting, container-offset));
}
.container-fluid {
    @include container(100%, map.get($nexa-setting, container-offset));
}

// Grid
$__max-cols: map.get($nexa-setting, grid-columns);

// Grid-col
@for $i from 1 through $__max-cols {
    .grid-#{$i} {
        display: grid;
        grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
}

// Grid col adaptive
@each $bp, $width in $nexa-breakpoints {
    @media (min-width: $width) {
        @for $i from 1 through $__max-cols {
            .grid-#{$bp}-#{$i} {
                display: grid;
                grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
            }
        }
    }
}

// Col
@for $i from 1 through $__max-cols {
    .col-#{$i} {
        grid-column: span #{$i} / span #{$i};
    }
}

// Col adaptive
@each $bp, $width in $nexa-breakpoints {
    @media (min-width: $width) {
        @for $i from 1 through $__max-cols {
            .col-#{$bp}-#{$i} {
                grid-column: span #{$i} / span #{$i};
            }
        }
    }
}
